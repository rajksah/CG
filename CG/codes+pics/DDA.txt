/*C++ Program to draw line using DDA line drawing algorithm using opengl*/
#include<Windows.h>
#include<glew.h>
#include<freeglut.h>
#include<iostream>
#include<math.h>

using namespace std;

float r, g, b, x, y;
float x_1, y_1, x_2, y_2;
float xin, yin;
bool flag = true;

void mouse(int button, int state, int mousex, int mousey)
{
	if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
	{
		flag == true;
		x_1 = mousex;
		y_1 = 640-mousey;
	}
}

int sgn(float d)
{
	if (d == 0)
	{
		return 0;
	}
	else if (d < 0)
	{
		return -1;
	}
	else
	{
		return 1;
	}
}
void Line()
{
	float dx, dy, length;
	dy = y_2 - y_1;
	dx = x_2 - x_1;

	if (abs(dx) >= abs(dy))
	{
		length = abs(dx);
	}
	else
	{
		length = abs(dy);
	}
	xin = (x_2 - x_1) / length;
	yin = (y_2 - y_1) / length;

	float x, y;
	x = x_1 + 0.5 * sgn(xin);
	y = y_1 + 0.5 * sgn(yin);
	int i = 0;
	while (i < length)
	{
		glBegin(GL_POINTS);
		glVertex2i(x, y);
		glEnd();

		x = x + xin;
		y = y + yin;
		i++;
	}
	glFlush();

}

void init()
{
	glClearColor(1.0, 1.0, 0.0, 0.0);
	glColor3f(1.0, 0.0, 0.0);
	gluOrtho2D(0, 640, 0, 640);
	glClear(GL_COLOR_BUFFER_BIT);
}

int main(int argc,char **argv)
{
	cout << "Enter the last point of a line";
	cin >> x_2 >> y_2;
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(0, 640);
	glutCreateWindow("DDA LINE DRAWING TECHNIQUE");
	init();
	glutMouseFunc(mouse);
	glutDisplayFunc(Line);
	glutMainLoop();
	return 0;
}